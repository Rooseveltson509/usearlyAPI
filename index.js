import dotenv from "dotenv";
import express from "express";
import swaggerUi from "swagger-ui-express";
import { fileURLToPath } from "url";
import fs from "fs";
import path from "path";
import cookieParser from "cookie-parser"; // âœ… NÃ©cessaire pour CSRF
import csurf from "csurf"; // âœ… Importation du middleware CSRF
dotenv.config();
import bodyParser from "body-parser";
import apiRouter from "./apiRouter.js";
import promBundle from "express-prom-bundle";
import cors from "cors";
import { func } from "./funcs/functions.js";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const configPath = path.resolve(__dirname, "./config/config.json");
const config = JSON.parse(fs.readFileSync(configPath, "utf-8"));
const PORT = process.env.PORT || config.port;

const swaggerPath = path.resolve("./config/swagger.json");
const swaggerDocument = JSON.parse(fs.readFileSync(swaggerPath, "utf-8"));

const server = express();

// âœ… CORS doit Ãªtre placÃ© en premier
server.use(cors(func.corsOptionsDelegate));
server.options("*", cors(func.corsOptionsDelegate));

// âœ… Cookie Parser doit Ãªtre ajoutÃ© avant `csurf`
server.use(cookieParser());

// âœ… Middleware CSRF Protection
const csrfProtection = csurf({
  cookie: {
    httpOnly: true, // ðŸ”’ SÃ©curise contre XSS
    secure: process.env.NODE_ENV === "production", // âœ… Actif uniquement en production
    sameSite: "Strict", // âœ… EmpÃªche les attaques CSRF intersites
  },
});

// âœ… Appliquer CSRF Protection AVANT les routes API
server.use(csrfProtection);

// âœ… Endpoint pour rÃ©cupÃ©rer le CSRF Token
server.get("/csrf-token", (req, res) => {
  res.json({ csrfToken: req.csrfToken() }); // âœ… Correctif ici !
});

// âœ… Middleware de parsing JSON (Important aprÃ¨s `cookieParser`)
server.use(express.json());
server.use(bodyParser.urlencoded({ extended: true, limit: "10mb" }));
server.use(bodyParser.json({ limit: "10mb" }));

// âœ… Swagger
server.use(
  config.rootAPI + "api-docs",
  swaggerUi.serve,
  swaggerUi.setup(swaggerDocument)
);

// âœ… Middleware Prometheus pour monitoring
const metricsMiddleware = promBundle({
  includeMethod: true,
  includePath: true,
});
server.use(metricsMiddleware);

// âœ… Chargement de l'API Router APRÃˆS CSRF
server.use(config.rootAPI, apiRouter);

// âœ… Gestion des erreurs globales
process.on("uncaughtException", (err) => {
  console.error("Uncaught Exception:", err.stack);
});

process.on("unhandledRejection", (reason) => {
  console.error("Unhandled Rejection:", reason);
});

// âœ… Lancement du serveur
server.listen(PORT, "0.0.0.0", function () {
  console.log("âœ… Server en Ã©coute sur le port : ", PORT);
  console.log("âœ… ENV MODE:", process.env.NODE_ENV);
  console.log(
    `âœ… API disponible Ã  : http://localhost:${PORT}${config.rootAPI}`
  );
});
