// Imports
import db from "./models/index.js";
import express from "express";
import { getUserId } from "./utils/jwtUtils.js";
import cors from "cors";
import { func } from "./funcs/functions.js";
import { user } from "./routes/usersCtrl.js";
import { ticket } from "./routes/ticketsCtrl.js";
import { reporting } from "./routes/reportingCtrl.js";
import { suggestion } from "./routes/suggestionCtrl.js";
import { coupDeCoeur } from "./routes/coupdecoeurCtrl.js";
import { adminAction } from "./routes/adminCtrl.js";
import { brandCtrl } from "./routes/brandCtrl.js";
import { brandResponseCtrl } from "./routes/brandResponseCtrl.js";
import { posts } from "./routes/postCtrl.js";
import { reportingDesc } from "./routes/reportingDescriptionCtrl.js";
import { comment } from "./routes/commentCtrl.js";
import { commentReport } from "./routes/commentReportCtrl.js";
import { commentCdc } from "./routes/commentCdcCtr.js";
import { commentSuggestion } from "./routes/commentSuggestionCtrl.js";
import { createBrandTicket } from "./routes/brandTicketCtrl.js";
import { timeline } from "./routes/reportTimelineStepCtrl.js";
import { reportService } from "./services/reportService.js";
import { service as siteService } from "./services/siteService.js";
import {
  createNotification,
  markNotificationAsRead,
  getNotifications,
} from "./routes/notificationCtrl.js";
import rateLimit from "express-rate-limit";
import csrfProtection from "./middleware/csrfProtection.js"; // üî• Import du middleware CSRF
//import { checkAlreadyAuthenticated } from "./middleware/checkAlreadyAuthenticated.js"; // üî• Import du middleware CSRF
import {
  validateCoupdeCoeur,
  validateReport,
  validateSuggest,
} from "./middleware/validateReport.js";
import { sendNotificationToUser } from "./utils/notificationUtils.js";
import upload from "./config/multer.js";
import { isAdmin } from "./middleware/auth.js";
import { authenticateBrand } from "./middleware/authenticateBrand.js";
const { Reporting, User } = db;
// D√©finition de l'API Router
const apiRouter = express.Router();

// Middleware de limitation de d√©bit (rate limiting)
const refreshLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 50, // ‚úÖ Permet plus de requ√™tes en d√©veloppement
  message: {
    success: false,
    message: "Trop de requ√™tes, r√©essayez plus tard.",
  },
  headers: true,
});

// ‚úÖ Route pour r√©cup√©rer le CSRF Token
apiRouter.get("/csrf-token", csrfProtection, (req, res) => {
  try {
    const csrfToken = req.csrfToken(); // ‚úÖ fonctionne maintenant

    console.log("‚úÖ CSRF Token g√©n√©r√© :", csrfToken);

    res.cookie("_csrf", csrfToken, {
      httpOnly: false, // ‚úÖ accessible c√¥t√© client
      secure: process.env.COOKIE_SECURE === "true",
      sameSite: process.env.COOKIE_SECURE === "true" ? "None" : "Lax",
    });

    res.json({ csrfToken });
  } catch (error) {
    console.error("‚ùå Erreur lors de la g√©n√©ration du CSRF Token :", error);
    res.status(500).json({ error: "CSRF Token non g√©n√©r√©" });
  }
});

const refreshCors = cors({
  origin: true,
  credentials: true,
  methods: ["POST"],
  allowedHeaders: ["Authorization", "Content-Type", "X-CSRF-Token"],
});

// ‚úÖ Route s√©curis√©e avec CSRF pour `refresh-token`
apiRouter.post(
  "/user/refresh-token",
  refreshLimiter,
  refreshCors,

  // ‚úÖ Debug cookies / CSRF
  (req, res, next) => {
    console.log("üß™ Cookies re√ßus :", req.cookies);
    console.log("üß™ Header X-CSRF-Token :", req.headers["x-csrf-token"]);
    console.log("üß™ NODE_ENV :", process.env.NODE_ENV);
    next();
  },

  // ‚úÖ CSRF
  process.env.NODE_ENV === "production"
    ? csrfProtection
    : (req, res, next) => {
        console.log("‚ö† CSRF middleware d√©sactiv√© (dev mode)");
        next();
      },

  user.refreshToken
);

const permissiveCors = {
  origin: true, // ‚úÖ Autorise toutes les origines
  methods: ["POST", "GET", "PUT"], // ‚úÖ Autorise uniquement les m√©thodes n√©cessaires
  credentials: true, // ‚úÖ Permet l'envoi des cookies (obligatoire pour CSRF & refreshToken)
  allowedHeaders: ["Authorization", "Content-Type", "X-CSRF-Token"], // ‚úÖ Assure que CSRF passe bien
};

apiRouter
  .route("/user/login")
  .options(cors(permissiveCors)) // ‚úÖ Gestion des pr√©-requ√™tes OPTIONS pour √©viter les erreurs CORS
  .post(cors(permissiveCors), user.login); // ‚úÖ Applique la configuration CORS correctement

apiRouter
  .route("/user/logout")
  .options(cors(permissiveCors))
  .post(cors(permissiveCors), user.logout);

apiRouter
  .route("/user/verify")
  .options(cors(permissiveCors)) // G√©rer les pr√©-requ√™tes OPTIONS
  .post(cors(permissiveCors), user.verifyToken);

apiRouter
  .route("/user/register", cors(func.corsOptionsDelegate))
  .post(user.register);

apiRouter
  .route("/user/me", cors(func.corsOptionsDelegate))
  .get(user.getUserProfile);

apiRouter
  .route("/user/notifications/:userId")
  .options(cors(permissiveCors)) // G√©rer les pr√©-requ√™tes OPTIONS
  .get(cors(permissiveCors), getNotifications); // R√©cup√©rer les notifications de l'utilisateur

apiRouter
  .route("/user/notifications/read/:userId")
  .options(cors(permissiveCors)) // G√©rer les pr√©-requ√™tes OPTIONS
  .put(cors(permissiveCors), markNotificationAsRead); // Marquer la notification comme lue

apiRouter
  .route("/user/notifications")
  .options(cors(permissiveCors)) // G√©rer les pr√©-requ√™tes OPTIONS
  .post(cors(permissiveCors), createNotification); // Cr√©er une nouvelle notification pour l'utilisateur

/* apiRouter
  .route("/user/me", cors(func.corsOptionsDelegate))
  .put(user.updateUserProfile); */
apiRouter
  .route("/user/me", cors(func.corsOptionsDelegate))
  .put(upload.single("avatar"), user.updateUserProfile); // Ajouter Multer comme middleware

apiRouter
  .route("/user/pwd/me", cors(func.corsOptionsDelegate))
  .put(user.updateUserPassword);
/* apiRouter
  .route("/user/mailValidation/:userId/", cors(func.corsOptionsDelegate))
  .get(user.confirmEmail); */
apiRouter
  .route("/user/mailValidation", cors(func.corsOptionsDelegate))
  .post(user.confirmEmail);

apiRouter
  .route("/user/forgot-password", cors(func.corsOptionsDelegate))
  .post(user.forgotPassword);

apiRouter
  .route("/user/resetpwd/:userId/:token", cors(func.corsOptionsDelegate))
  .post(user.resetPassword);

apiRouter
  .route("/user/del/:email", cors(func.corsOptionsDelegate))
  .delete(user.destroyUserProfile);

// Espace Marque
apiRouter
  .route("/brand/login", cors(func.corsOptionsDelegate))
  .post(/* checkAlreadyAuthenticated, */ brandCtrl.login); // Middleware ajout√© ici

apiRouter
  .route("/brand-reply/:reportId", cors(func.corsOptionsDelegate))
  .post(brandResponseCtrl.createBrandReply);

// R√©cup√©rer la r√©ponse de marque pour un report donn√©
apiRouter
  .route("/reports/:id/brand-reply")
  .options(cors(permissiveCors))
  .get(cors(permissiveCors), brandResponseCtrl.getBrandReplyByReport);

apiRouter
  .route("/brand/profile", cors(func.corsOptionsDelegate))
  .get(brandCtrl.fetchBrandProfile);

apiRouter
  .route("/brand/:brandName", cors(func.corsOptionsDelegate))
  .get(brandCtrl.getBrandByName);

apiRouter
  .route("/brand/:brandName/analytics/weekly")
  .get(cors(func.corsOptionsDelegate), brandCtrl.getAnalyticsStats);

apiRouter
  .route("/brand/:brandName/analytics/summary")
  .get(cors(func.corsOptionsDelegate), brandCtrl.getSummaryAnalytics);

apiRouter
  .route("/brand/:brandName/reports/latest")
  .get(cors(func.corsOptionsDelegate), brandCtrl.getLatestReports);

apiRouter
  .route("/brand/:brandName/latest-feedbacks")
  .get(cors(func.corsOptionsDelegate), brandCtrl.getLatestFeedbacks);

apiRouter
  .route("/brand/:brandName/top-report")
  .get(cors(func.corsOptionsDelegate), brandCtrl.getTopReport);

apiRouter
  .route("/brand/:idticket/response", cors(func.corsOptionsDelegate))
  .post(createBrandTicket.createTicket);

// 1-b Users routes('/admin/')
apiRouter
  .route("/admin/brand/new", cors(func.corsOptionsDelegate))
  .post(isAdmin, upload.single("avatar"), user.createBrandNew);

apiRouter
  .route("/admin/brand/all", cors(func.corsOptionsDelegate))
  .get(user.BrandList);

/* apiRouter
  .route("/admin/brand/update/:brandId", cors(func.corsOptionsDelegate))
  .put(isAdmin, upload.single("avatar"), user.updateBrand); */

apiRouter.put(
  "/admin/brand/update/:id",
  async (req, res, next) => {
    console.log("üîç ID re√ßu dans la route API :", req.params.id);
    next();
  },
  isAdmin,
  upload.single("avatar"),
  user.updateBrand
);

apiRouter.route("/admin/brand/:id").delete(isAdmin, user.deleteBrand);

apiRouter
  .route("/user/admin/:email", cors(func.corsOptionsDelegate))
  .delete(user.destroyUserProfileByAdmin);
apiRouter
  .route("/admin/users/", cors(func.corsOptionsDelegate))
  .get(user.listUsers);
apiRouter
  .route("/user-admin/:email", cors(func.corsOptionsDelegate))
  .get(user.findByEmail);

// signalement
apiRouter
  .route("/user/alert/new")
  .options(cors(permissiveCors)) // G√©rer les pr√©-requ√™tes OPTIONS
  .post(
    cors(permissiveCors),
    validateReport.validateReportFields,
    reporting.createReport
  );
apiRouter
  .route("/reportings/:reportingId/subcategories")
  .get(cors(func.corsOptionsDelegate), reporting.getSubCategories);

apiRouter
  .route("/report/page-info")
  .options(cors(permissiveCors))
  .get(cors(permissiveCors), reporting.getPageInfo);

apiRouter
  .route("/reportings/grouped", cors(func.corsOptionsDelegate))
  .get(reporting.getGroupedReports);
// ‚úÖ Endpoint pour r√©cup√©rer les bugs les plus signal√©s pour un site donn√©
apiRouter
  .route("/user/alert/popular")
  .options(cors(permissiveCors))
  .get(cors(permissiveCors), async (req, res) => {
    try {
      const siteUrl = req.query.siteUrl;
      if (!siteUrl) {
        return res.status(400).json({ error: "Param√®tre siteUrl manquant." });
      }

      const normalizedUrl = siteService.normalizeUrl(siteUrl);
      if (!siteService.isValidUrl(normalizedUrl)) {
        return res
          .status(400)
          .json({ error: "URL invalide ou non approuv√©e." });
      }

      const popularBugs = await reportService.getTopReportedBugs(normalizedUrl);
      return res.status(200).json({ success: true, reports: popularBugs });
    } catch (error) {
      console.error("‚ùå Erreur dans /user/alert/popular:", error);
      return res.status(500).json({
        error:
          "Une erreur est survenue lors de la r√©cup√©ration des signalements populaires.",
      });
    }
  });
apiRouter
  .route("/user/alert/support")
  .options(cors(permissiveCors))
  .post(cors(permissiveCors), reporting.confirmReport);

apiRouter
  .route("/reportings/grouped-by-category")
  .get(cors(func.corsOptionsDelegate), reporting.getAllGroupedReports);

apiRouter
  .route("/reports/:reportId/timeline")
  .post(
    cors(func.corsOptionsDelegate),
    authenticateBrand,
    timeline.createOrUpdateTimelineStep // Utilisation de `POST` pour cr√©er ou mettre √† jour
  )
  .put(
    cors(func.corsOptionsDelegate),
    authenticateBrand,
    timeline.createOrUpdateTimelineStep // Utilisation de `PUT` pour la mise √† jour
  )
  .options(cors(permissiveCors))
  .get(
    cors(permissiveCors),
    timeline.getTimelineSteps // ‚úÖ Pas besoin d'auth pour voir la timeline
  );

apiRouter
  .route("/report/description")
  .options(cors(permissiveCors))
  .post(cors(permissiveCors), reportingDesc.createReportingDescription);

/* apiRouter
  .route("/reportings/reportings-with-subcategories")
  .get(cors(func.corsOptionsDelegate), reporting.getAllGroupedReports); */

/* apiRouter
  .route("/reporting/:id", cors(func.corsOptionsDelegate))
  .get(reporting.getReport); */

apiRouter
  .route("/reporting/:reportingId")
  .options(cors(permissiveCors))
  .get(cors(permissiveCors), reporting.getReportWithDescriptions);

apiRouter
  .route("/test/site-metadata", cors(func.corsOptionsDelegate))
  .get(reporting.testGetSiteMetadata);

/* Create suggestion */
apiRouter
  .route("/user/suggestion/new", cors(func.corsOptionsDelegate))
  .options(cors(permissiveCors)) // G√©rer les pr√©-requ√™tes OPTIONS
  .post(
    cors(permissiveCors),
    validateSuggest.validateReportFields,
    suggestion.create
  );

/* Create coup de coeur */
apiRouter
  .route("/user/coupdecoeur/new", cors(func.corsOptionsDelegate))
  .options(cors(permissiveCors)) // G√©rer les pr√©-requ√™tes OPTIONS
  .post(
    cors(permissiveCors),
    validateCoupdeCoeur.validateReportFields,
    coupDeCoeur.createCoupdeCoeur
  );

apiRouter
  .route("/user/reports", cors(func.corsOptionsDelegate))
  .get(reporting.getAllReports);

/* reaction report */
apiRouter
  .route("/report/:reportId/reactions", cors(func.corsOptionsDelegate))
  .put(reporting.addReactionToReport);

apiRouter
  .route("/reports/:reportId/reactions", cors(func.corsOptionsDelegate))
  .get(reporting.getAllReportReactions); // ‚úÖ Nouvelle m√©thode pour r√©cup√©rer toutes les r√©actions

apiRouter
  .route("/reports/:reportId/reactions/:emoji", cors(func.corsOptionsDelegate))
  .get(reporting.getReportReactionUsers);
/* end reaction report */

/* reaction suggestion */
/* ‚úÖ Routes pour les r√©actions sur les Suggestions */
apiRouter
  .route("/suggestion/:suggestionId/reactions", cors(func.corsOptionsDelegate))
  .put(suggestion.addReactionToSuggestion) // ‚úÖ Ajout d'une r√©action
  .get(suggestion.getAllSuggestionReactions); // ‚úÖ R√©cup√©ration des r√©actions

apiRouter
  .route(
    "/suggestion/:suggestionId/reactions/count",
    cors(func.corsOptionsDelegate)
  )
  .get(suggestion.getReactionsCountBySuggest); // ‚úÖ R√©cup√©ration des r√©actions

apiRouter
  .route(
    "/suggestion/:suggestionId/reactions/:emoji",
    cors(func.corsOptionsDelegate)
  )
  .get(suggestion.getSuggestionReactionUsers); // ‚úÖ R√©cup√©ration des utilisateurs ayant r√©agi avec un emoji sp√©cifique

/* end reaction suggestion */

/* reaction cdc */
apiRouter
  .route("/cdc/:coupdecoeurId/reactions", cors(func.corsOptionsDelegate))
  .put(coupDeCoeur.addReactionToCdc);

apiRouter
  .route("/cdc/:coupdecoeurId/reactions", cors(func.corsOptionsDelegate))
  .get(coupDeCoeur.getAllCdcReactions);

apiRouter
  .route("/cdc/:cdcId/reactions/:emoji", cors(func.corsOptionsDelegate))
  .get(coupDeCoeur.getCdcReactionUsers);
/* end reaction cdc */

apiRouter
  .route("/reports/:reportId/comments/count", cors(func.corsOptionsDelegate))
  .get(comment.getReportCommentCount);

apiRouter
  .route("/posts/:postId/comments/count", cors(func.corsOptionsDelegate))
  .get(posts.getPostCommentCount);

apiRouter
  .route(
    "/suggestions/:suggestionId/comments/count",
    cors(func.corsOptionsDelegate)
  )
  .get(comment.getSuggestionCommentCount);

apiRouter
  .route("/cdc/:coupDeCoeurId/comments/count", cors(func.corsOptionsDelegate))
  .get(comment.getCdcCommentCount);

apiRouter
  .route("/user/coupsdecoeur", cors(func.corsOptionsDelegate))
  .get(coupDeCoeur.getAllCoupdeCoeur);
apiRouter
  .route("/user/suggestion", cors(func.corsOptionsDelegate))
  .get(suggestion.getAllSuggestions);

// R√©cup√©rer tous les posts
apiRouter.route("/user/posts").get(posts.getAllPosts);

// R√©cup√©rer un post sp√©cifique
apiRouter.route("/posts/:id").get(posts.getPostById);

// Cr√©er un post (avec authentification)
apiRouter
  .route("/user/post")
  .post(cors(func.corsOptionsDelegate), posts.createPost);

// Modifier un post
apiRouter
  .route("/user/posts/:id")
  .put(cors(func.corsOptionsDelegate), posts.updatePost);

// Supprimer un post
apiRouter
  .route("/posts/:id") // üî• Supprime un post (admin = tout, user = son post)
  .delete(cors(func.corsOptionsDelegate), posts.deletePost);

apiRouter
  .route("/posts")
  .delete(cors(func.corsOptionsDelegate), posts.getFilteredPosts);

// update like post
apiRouter
  .route("/posts/:postId/like")
  .put(cors(func.corsOptionsDelegate), posts.toggleLike);

// update reaction post
apiRouter
  .route("/posts/:postId/reaction")
  .put(cors(func.corsOptionsDelegate), posts.addReaction);

// get reaction post from each user
apiRouter
  .route("/posts/:postId/reactions/:emoji")
  .get(cors(func.corsOptionsDelegate), posts.getReactionUsers);

apiRouter
  .route("/posts/:postId/reactions") // ‚úÖ Nouvelle route pour r√©cup√©rer toutes les r√©actions
  .get(cors(func.corsOptionsDelegate), posts.getAllPostReactions);

// üìå Ajouter un commentaire √† un post (üîí Authentification requise)
apiRouter
  .route("/posts/:postId/comments")
  .post(cors(func.corsOptionsDelegate), comment.addComment);

// üìå R√©cup√©rer les commentaires d'un post avec pagination
apiRouter
  .route("/posts/:postId/comments")
  .get(cors(func.corsOptionsDelegate), comment.getPostComments);

// üìå Supprimer un commentaire (üîí Seulement l'auteur du commentaire)
apiRouter
  .route("/comments/:commentId")
  .delete(cors(func.corsOptionsDelegate), comment.deleteComment);

// üìå Ajouter un commentaire √† un Report (üîí Authentification requise)
apiRouter
  .route("/reports/:reportId/comments")
  .post(cors(func.corsOptionsDelegate), commentReport.addCommentToReport);

// üìå R√©cup√©rer les commentaires d'un Report avec pagination
apiRouter
  .route("/reports/:reportId/comments")
  .get(cors(func.corsOptionsDelegate), commentReport.getReportComments);

// üìå Supprimer un commentaire d'un Report (üîí Seulement l'auteur du commentaire ou un admin)
apiRouter
  .route("/comments/:commentId")
  .delete(
    cors(func.corsOptionsDelegate),
    commentReport.deleteCommentFromReport
  );

// üìå Ajouter un commentaire √† un CoupDeCoeur (üîí Authentification requise)
apiRouter
  .route("/coupdecoeur/:coupDeCoeurId/comments")
  .post(cors(func.corsOptionsDelegate), commentCdc.addCommentToCdc);

// üìå R√©cup√©rer les commentaires d'un CoupDeCoeur avec pagination
apiRouter
  .route("/coupdecoeur/:coupDeCoeurId/comments")
  .get(cors(func.corsOptionsDelegate), commentCdc.getCdcComments);

// üìå Supprimer un commentaire d'un CoupDeCoeur (üîí Seulement l'auteur ou un admin)
apiRouter
  .route("/comments/:commentId")
  .delete(cors(func.corsOptionsDelegate), commentCdc.deleteCommentFromCdc);

// üìå Ajouter un commentaire √† une Suggestion (üîí Authentification requise)
apiRouter
  .route("/suggestions/:suggestionId/comments")
  .post(
    cors(func.corsOptionsDelegate),
    commentSuggestion.addCommentToSuggestion
  );

// üìå R√©cup√©rer les commentaires d'une Suggestion avec pagination
apiRouter
  .route("/suggestions/:suggestionId/comments")
  .get(cors(func.corsOptionsDelegate), commentSuggestion.getSuggestionComments);

// üìå Supprimer un commentaire d'une Suggestion (üîí Seulement l'auteur ou un admin)
apiRouter
  .route("/comments/:commentId")
  .delete(
    cors(func.corsOptionsDelegate),
    commentSuggestion.deleteCommentFromSuggestion
  );

apiRouter
  .route("/user/admin/:email", cors(func.corsOptionsDelegate))
  .get(reporting.getReportsByUser);

// Route pour r√©cup√©rer les statistiques de l'utilisateur
apiRouter.route("/user/stats", cors(func.corsOptions)).get(user.getUserStats);

// 2- Tickets routes
apiRouter
  .route("/ticket/:idReporting/new", cors(func.corsOptionsDelegate))
  .post(ticket.create);

// action to admin only
apiRouter
  .route("/admin/clear-tables", cors(func.corsOptionsDelegate))
  .delete(adminAction.clearTables);

// Endpoint pour mettre √† jour le statut d'un signalement
apiRouter
  .route("/user/reporting/:reportingId/status")
  .patch(cors(permissiveCors), async (req, res) => {
    let headerAuth = req.headers["authorization"];
    let userId = getUserId(headerAuth);
    if (!userId || userId < 0) {
      return res.status(400).json({ error: "Utilisateur non authentifi√©." });
    }

    const user = await User.findByPk(userId);
    if (!user || user.role !== "admin") {
      return res.status(403).json({
        error:
          "Acc√®s refus√©. Seuls les administrateurs peuvent effectuer cette action.",
      });
    }

    const { reportingId } = req.params;
    const { status } = req.body;
    const validStatuses = ["pending", "resolved", "in-progress"];
    if (!validStatuses.includes(status)) {
      return res.status(400).json({ error: "Statut invalide." });
    }

    try {
      const reporting = await Reporting.findByPk(reportingId);
      if (!reporting) {
        return res.status(404).json({ error: "Signalement non trouv√©." });
      }

      // Mise √† jour du statut du signalement
      reporting.status = status;
      await reporting.save();

      // Si le signalement est marqu√© comme "r√©solu", notifier tous les utilisateurs associ√©s
      if (status === "resolved") {
        const users = await reporting.getAuthor();
        console.log("Utilisateurs r√©cup√©r√©s :", users);
        await Promise.all(
          users.map(async (user) => {
            console.log("notification sent: ", user.email); // Ajoute un log pour v√©rifier
            await sendNotificationToUser(
              user.id,
              "üéâ Votre signalement a √©t√© r√©solu !",
              "bug_resolved"
            );

            console.log("notification sent: ");
          })
        );
      }

      return res
        .status(200)
        .json({ message: "Statut mis √† jour avec succ√®s." });
    } catch (error) {
      console.error(error);
      return res.status(500).json({ error: "Erreur interne." });
    }
  });

export default apiRouter;
