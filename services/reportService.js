import db from "../models/index.js";
import dotenv from "dotenv";
import stringSimilarity from "string-similarity";
import { sendNotificationToUser } from "./notificationService.js";
const {
  Reporting,
  ReportingDescription,
  Category,
  UserPoints,
  ReportingUsers,
} = db;
dotenv.config();

export const reportService = {
  async createReporting(userId, data) {
    const { siteUrl, bugLocation, description } = data;

    // ‚úÖ Normaliser l'URL et extraire le domaine
    const fullUrl = siteUrl.startsWith("http") ? siteUrl : `https://${siteUrl}`;
    const parsedUrl = new URL(fullUrl);
    const domain = parsedUrl.hostname.replace(/^www\./, ""); // Ex: "nike.com"

    console.log(
      `üîç V√©rification du signalement sur: ${domain}, ${bugLocation}`
    );

    // üîç V√©rifier si un signalement similaire (m√™me domaine + bugLocation) existe d√©j√†
    const existingReport = await Reporting.findOne({
      where: { domain, bugLocation },
    });

    if (existingReport) {
      if (existingReport.userId === userId) {
        return {
          isDuplicate: true,
          status: 200,
          success: true,
          message:
            "Vous avez d√©j√† signal√© ce probl√®me, nous sommes en train de l'√©tudier.",
          reportingId: existingReport.id,
        };
      }

      const existingDescriptions = await ReportingDescription.findOne({
        where: { reportingId: existingReport.id, userId },
      });

      if (existingDescriptions) {
        return {
          isDuplicate: true,
          status: 200,
          success: true,
          message:
            "Vous avez d√©j√† signal√© ce probl√®me, nous sommes en train de l'√©tudier.",
          reportingId: existingReport.id,
        };
      }

      await ReportingDescription.create({
        reportingId: existingReport.id,
        userId,
        description,
      });

      return {
        status: 200,
        success: true,
        message:
          "Un signalement similaire existe d√©j√†. Votre description a √©t√© ajout√©e.",
        reportingId: existingReport.id,
      };
    }

    // üÜï Cr√©ation d‚Äôun nouveau signalement avec `domain`
    const newReporting = await Reporting.create({
      userId,
      siteUrl,
      domain, // ‚úÖ On stocke le domaine pour √©viter les erreurs
      bugLocation,
      categories: data.categories,
      description,
      marque: data.marque,
      emojis: data.emojis,
      blocking: data.blocking,
      capture: data.capture,
      tips: data.tips,
    });
    // Ajouter un enregistrement dans ReportingUsers pour le nouveau signalement
    await ReportingUsers.create({
      reportingId: newReporting.id,
      userId,
    });

    return {
      isDuplicate: false,
      status: 201,
      success: true,
      message: "Nouveau signalement cr√©√© avec succ√®s.",
      reportingId: newReporting.id,
    };
  },

  async findSimilarReporting(siteUrl, bugLocation, description) {
    const start = Date.now();
    console.log(
      `üîç Recherche signalement similaire pour ${siteUrl} - ${bugLocation}`
    );

    const reports = await Reporting.findAll({
      where: { siteUrl, bugLocation },
      include: [{ model: ReportingDescription, as: "descriptions" }],
    });

    console.log(
      `üìå [${Date.now() - start}ms] Signalements trouv√©s : ${reports.length}`
    );

    if (reports.length === 0) {
      return null;
    }

    // Comparer la description avec les existantes
    const similarityStart = Date.now();
    for (let report of reports) {
      for (let desc of report.descriptions) {
        const similarity = stringSimilarity.compareTwoStrings(
          description.toLowerCase(),
          desc.description.toLowerCase()
        );
        console.log(
          `üßê Comparaison "${description}" vs "${desc.description}" ‚Üí Similarit√©: ${similarity.toFixed(2)}`
        );

        if (similarity > 0.8) {
          console.log(
            `‚úÖ [${Date.now() - similarityStart}ms] Signalement similaire d√©tect√© : ${report.id}`
          );
          return report;
        }
      }
    }

    console.log(
      `‚ùå [${Date.now() - similarityStart}ms] Aucun signalement similaire trouv√©.`
    );
    return null;
  },
  async hasUserAlreadyReported(reportingId, userId) {
    const isAuthor = await Reporting.findOne({
      where: { id: reportingId, userId },
    });
    if (isAuthor) return true;

    const existingDescription = await ReportingDescription.findOne({
      where: { reportingId, userId },
    });
    return !!existingDescription;
  },

  /**
   * Recherche ou cr√©e les cat√©gories n√©cessaires.
   */
  async findOrCreateCategories(categories, siteTypeId) {
    const existingCategories = await Category.findAll({
      where: { name: categories },
      attributes: ["id", "name"],
    });

    const existingCategoryNames = existingCategories.map((cat) => cat.name);

    const newCategories = categories.filter(
      (cat) => !existingCategoryNames.includes(cat)
    );

    const newCategoryInstances = await Promise.all(
      newCategories.map((categoryName) =>
        Category.create({ name: categoryName, siteTypeId })
      )
    );

    return [...existingCategories, ...newCategoryInstances];
  },
  /**
   * R√©cup√®re un signalement avec ses descriptions associ√©es.
   */
  async getReportingWithDescriptions(reportingId) {
    try {
      const reporting = await Reporting.findOne({
        where: { id: reportingId },
        include: [
          {
            model: ReportingDescription,
            as: "descriptions",
            attributes: ["id", "userId", "description", "createdAt"],
          },
        ],
      });

      if (!reporting) {
        return { success: false, message: "Signalement introuvable." };
      }

      // üöÄ V√©rifier si Sequelize renvoie une seule description
      console.log(
        "üîç Sequelize renvoie :",
        JSON.stringify(reporting.descriptions, null, 2)
      );

      return {
        success: true,
        reporting: {
          ...reporting.toJSON(), // Assure que l'objet est bien structur√©
          descriptions: Array.from(new Set(reporting.descriptions)), // ‚úÖ Supprime les doublons accidentels
        },
      };
    } catch (error) {
      console.error("Erreur lors de la r√©cup√©ration du signalement :", error);
      return { success: false, message: "Erreur interne du serveur." };
    }
  },
  /**
   * R√©cup√®re les bugs les plus signal√©s pour un site donn√©
   * @param {string} siteUrl - L'URL normalis√©e du site (ex: adidas.fr)
   * @returns {Promise<Array>} Liste des bugs les plus signal√©s avec compteur
   */
  async getTopReportedBugs(siteUrl) {
    try {
      const reports = await Reporting.findAll({
        where: { siteUrl },
        include: [
          {
            model: ReportingDescription,
            as: "descriptions",
          },
        ],
      });

      const result = reports.map((report) => {
        return {
          reportingId: report.id,
          bugLocation: report.bugLocation,
          mainDescription: report.description,
          count: 1 + report.descriptions.length, // le cr√©ateur initial + descriptions li√©es
        };
      });

      // üîΩ Tri d√©croissant selon le nombre de signalements
      return result.sort((a, b) => b.count - a.count);
    } catch (error) {
      console.error("‚ùå Erreur getTopReportedBugs:", error);
      throw new Error("Impossible de r√©cup√©rer les signalements populaires.");
    }
  },
  addSupportToReport: async function (userId, reportingId) {
    try {
      // V√©rifie si le report existe
      const report = await Reporting.findByPk(reportingId);
      if (!report) {
        return { status: 404, error: "Signalement introuvable." };
      }

      // V√©rifie si l'utilisateur a d√©j√† soutenu ce report
      const existing = await ReportingDescription.findOne({
        where: { userId, reportingId },
      });

      if (existing) {
        return {
          status: 200,
          success: true,
          message: "Vous avez d√©j√† confirm√© ce bug.",
          points: 0,
        };
      }

      // Cr√©e une description vide pour repr√©senter un soutien
      await ReportingDescription.create({
        userId,
        reportingId,
        description: "(Confirmation sans commentaire)",
      });

      // ‚úÖ Ajout des points dans UserPoints
      await UserPoints.create({
        userId,
        action: "support_bug",
        points: 5,
        metadata: { reportingId },
      });

      return {
        status: 200,
        success: true,
        message: "Merci ! Votre confirmation a √©t√© prise en compte.",
        points: 5, // üéÅ BONUS si gamification
      };
    } catch (error) {
      console.error("‚ùå Erreur addSupportToReport :", error);
      return {
        status: 500,
        error: "Erreur serveur lors de l'ajout du soutien.",
      };
    }
  },
  // M√©thode pour marquer un signalement comme r√©solu
  markReportingAsResolved: async (reportingId) => {
    // R√©cup√©rer le signalement √† partir de l'ID
    const reporting = await Reporting.findByPk(reportingId);
    if (!reporting) {
      throw new Error("Signalement introuvable");
    }

    // Mettre √† jour le statut du signalement en "r√©solu"
    reporting.status = "resolved";
    await reporting.save();

    // Envoyer une notification √† l'utilisateur qui a fait ce signalement
    sendNotificationToUser(
      reporting.userId,
      "üéâ Votre signalement a √©t√© r√©solu !"
    );
  },

  updateReporting: async (req, res) => {
    try {
      const { reportingId } = req.params; // ID du signalement
      const { status } = req.body; // Nouveau statut pour le signalement

      // V√©rifier que le statut est "r√©solu" et que l'utilisateur est admin
      if (status === "resolved") {
        // Appeler la m√©thode pour marquer le signalement comme r√©solu
        await this.markReportingAsResolved(reportingId);
        // R√©pondre avec un message de succ√®s
        return res
          .status(200)
          .json({ message: "Signalement marqu√© comme r√©solu" });
      }

      // Si le statut n'est pas "r√©solu", g√©rer d'autres cas
      // ...
    } catch (error) {
      console.error("Erreur lors de la mise √† jour du signalement", error);
      return res.status(500).json({
        error: "Erreur interne lors de la mise √† jour du signalement",
      });
    }
  },
};
